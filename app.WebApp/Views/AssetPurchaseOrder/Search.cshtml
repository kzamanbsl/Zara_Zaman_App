@model app.Services.AssetPurchaseOrderServices.AssetPurchaseOrderSearchDto
@{
    ViewData["Title"] = "Search";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="content-header">
    <div class="container-fluid ">
        <div class="breadcrumb d-flex justify-content-between align-items-center  pl-3 pr-3">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item"><a href="/Admin/Index">Home</a></li>
                <li class="breadcrumb-item active"> Asset Purchase Order List </li>
            </ol>
            <div>
                <a asp-action="AddAssetPurchaseOrderAndDetail"><i class="fa fa-plus"></i>  Add Asset Purchase Order </a>
            </div>
        </div>
    </div>
</div>


<section class="content">
    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <div class="row w-100">
                    <h5> <i class="fas fa-list"></i>  All Asset Purchase Order </h5>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="table-responsive">
                            <table id="AssetPurchaseOrderSearchTable" class="table table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.SerialNo)
                                        </th>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.OrderNo)
                                        </th>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.PurchaseDate)
                                        </th>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.StoreName)
                                        </th>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.SupplierName)
                                        </th>
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.OrderStatusName)
                                        </th>
                                        @* <th class="text-center">
                                        @Html.DisplayNameFor(model => model.TotalAmount)
                                        </th> *@
                                        <th class="text-center">
                                            @Html.DisplayNameFor(model => model.Action)
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</section>

<div class="modal fade" tabindex="-1" id="editAssetPuchaseOrderModal" data-toggle="modal" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form asp-action="UpdateAssetPurchaseOrder" method="post">


                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Update Asset Purchase Order</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">

                    @Html.HiddenFor(model => model.Id, new { id = "hidPOID" })

                    <div class="form-group">
                        <label>Purchase Date </label>
                        <input asp-for="PurchaseDate" id="purchaseDate" class="form-control" type="date" autocomplete="off" required />
                        <span asp-validation-for="PurchaseDate" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label>Warehouse</label>
                        <select class="form-control" id="storehouseId" asp-for="StorehouseId" asp-items="ViewBag.StorehouseList" required>
                            <option value="0" selected>-- Select Warehouse --</option>
                            <span asp-validation-for="StorehouseId" class="text-danger"></span>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Supplier</label>
                        <select class="form-control" id="supplierId" asp-for="SupplierId" asp-items="ViewBag.SupplierList" required>
                            <option value="0" selected>-- Select Supplier --</option>
                            <span asp-validation-for="SupplierId" class="text-danger"></span>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </form>

        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function makeEditble(rowId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateAssetPurchaseOrder", "AssetPurchaseOrder")",
                datatype: "Json",
                data: { id: rowId },
                success: function (data) {
                    $("#hidPOID").val(data.id);

                    // Parse date if needed and adjust for timezone
                    var purchaseDate = new Date(data.purchaseDate);
                    var offset = purchaseDate.getTimezoneOffset();
                    purchaseDate = new Date(purchaseDate.getTime() - (offset * 60 * 1000));

                    // Format date as YYYY-MM-DD
                    var formattedDate = purchaseDate.toISOString().split('T')[0];

                    // Set value
                    $("#purchaseDate").val(formattedDate);
                    $("#storehouseId").val(data.storeName);
                    $("#supplierId").val(data.supplierName);
                }
            });
        }

        $(document).ready(function () {
            $('#Asset-Management').addClass('menu-open');
            $('#AssetPurchaseOrderSearch').addClass('active');

            search();
        });

        $(document.body).on("click", "#AssetPurchaseOrderDTSearchBtn", function () {
            search();
        });

        function getSearchObject() {

            var searchVm = {

            }
            return searchVm;
        }

        function search() {
            var searchVm = getSearchObject();

            if ($.fn.DataTable.isDataTable("#AssetPurchaseOrderSearchTable")) {
                var table = $("#AssetPurchaseOrderSearchTable").DataTable();
                table.destroy();
            }

            var params = "";
            if (searchVm != undefined && searchVm !== "") {
                params = { searchVm: searchVm }
            }

            var oTable = $("#AssetPurchaseOrderSearchTable").DataTable({
                "aLengthMenu": [[25, 50, 100, 200], [25, 50, 100, 200]],
                "iDisplayLength": 25,
                "processing": true,
                "serverSide": true,
                "bSort": false,
                "ajax": {
                    url: "/AssetPurchaseOrder/Search",
                    type: "POST",
                    data: params
                },

                "columns": [
                    {
                        data: "SerialNo",
                        render: function (data, type, row, meta) {
                            return row.serialNo;
                        }
                    },
                    {
                        data: "OrderNo",
                        render: function (data, type, row, meta) {
                            return row.orderNo;
                        }
                    },
                    {
                        data: "PurchaseDate",
                        render: function (data, type, row, meta) {
                            var date = new Date(row.purchaseDate);
                            var formattedDate = (date.getDate().toString().padStart(2, '0')) + '-' + ((date.getMonth() + 1).toString().padStart(2, '0')) + '-' + date.getFullYear();
                            return formattedDate;
                        }
                    },
                    {
                        data: "StoreName",
                        render: function (data, type, row, meta) {
                            return row.storeName;
                        }
                    },
                    {
                        data: "SupplierName",
                        render: function (data, type, row, meta) {
                            return row.supplierName;
                        }
                    },
                    {
                        data: "OrderStatusName",
                        render: function (data, type, row, meta) {
                            return row.orderStatusName;
                        }
                    },



                    // {
                    //     data: "TotalAmount",
                    //     render: function (data, type, row, meta) {
                    //         var txt = '<div style="text-align: right">' + Number(row.totalAmount).toFixed(2) + '</div>';
                    //         return txt;
                    //     }
                    // },

                    {
                        data: "Action",
                        render: function (data, type, row, meta) {

                            var editBtn = "<a onclick='MakeEditable(" + row.id + ");' data-toggle='modal' data-target='#editAssetPuchaseOrderModal' data-placement='top'><i class='fas fa-pen text-warning m-1' title='Edit' aria-hidden='true'></i></a>";
                            var detailsBtn = "<a href='AssetPurchaseDetails/" + row.id + "'><i class='fa fa-eye text-info m-1' title='Details' aria-hidden='true'></i></a>";
                            var deleteBtn = "<a href='DeleteAssetPurchaseOrder/" + row.id + "'><i class='fas fa-trash text-danger m-1' title='Delete' aria-hidden='true'></i></a>";
                            var actionBtn = editBtn + detailsBtn + deleteBtn;
                            return actionBtn;
                        }
                    }

                    

                ]
            });
        }
    </script>
}
